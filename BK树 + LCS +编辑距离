//TODO 运行至本地，注意 包名和类名
package com.main.proxy.dp;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.*;

/**
 wechat 535032630
 */
public class BK {

    public static void main(String[] args) {
        BK bk = new BK();
        BkUnit root = null;
        //TODO 在本地运行时，把3500.txt放到D盘下，或者修改下面的文件路径
        Set<String> word = getWord("D://3500.txt");
        String[] words = new String[word.size()];
        word.toArray(words);
        long start1 = System.currentTimeMillis();
        for(int i = 0; i < words.length; i++) {
            root = bk.buildRoot(root, words[i]);
        }
        long end1 = System.currentTimeMillis();
        System.out.println("创建BK树时间:" + (end1 - start1) + "ms");
        String[] wrongs = new String[]{"codfidential", "gake", "fload"};
        for (int i = 0; i < wrongs.length; i ++) {
            List<String> result = new ArrayList<String>();
            // 当radium 过大，效果不好
            String line = "[ " + wrongs[i] + " ]查询到的类似单词：";
            long start2 = System.currentTimeMillis();
            result = bk.search(root, result, wrongs[i], 1);
            long end2 = System.currentTimeMillis();
            for (String st : result) {
                line += st + "\t";
            }
            System.out.println(line + " ;查找时间为：" + (end2 - start2)+"ms");
        }

    }

    public static Set<String> getWord(String url) {
        File file = new File(url);
        Set<String> result = new HashSet<String>();
        StringBuilder sb = new StringBuilder();
        try {
            FileInputStream fis = new FileInputStream(file);
            InputStreamReader isr = new InputStreamReader(fis);
            BufferedReader br = new BufferedReader(isr);
            String line = "";
            while ((line = br.readLine()) != null) {
                result.add(line);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }

    public List<String> search(BkUnit root,List<String> result, String text, int radium) {
        int dist = editDist(root.word, text);
        if (dist <= radium) {
            result.add(root.word);
       }
       if (root.getIter() != null) {
           for (int i = Math.abs(radium - dist); i <= radium + dist; i++) {
               if (root.getIter().containsKey(i)) {
                   search(root.getIter().get(i), result, text, radium);
               }
           }
       }
       return result;
    }

    public BkUnit buildRoot(BkUnit root, String text) {
        if (root == null) {
            return new BkUnit(text);
        }
        int dist = editDist(root.getWord(), text);
        if (text == null && text.trim().equals("") || dist == 0) {
            return null;
        }
        if (null != root.getIter() && null != root.getIter().get(dist)) {
            buildRoot(root.getIter().get(dist), text);
        } else {
            if (root.getIter() == null) {
                Map<Integer, BkUnit> iter = new HashMap<Integer, BkUnit>();
                iter.put(dist, new BkUnit(text));
                root.setIter(iter);
            } else {
                root.getIter().put(dist, new BkUnit(text));
            }
        }
        return root;
    }



    public int editDist(String a, String b) {
        int[][] tab = new int[a.length()+1][b.length()+1];
        for (int i = 0; i < tab.length; i++) {
            for (int j = 0; j < tab[0].length; j++) {
                if (i == 0 || j == 0) {
                    tab[i][j] = i + j;
                } else  {
                    if (a.charAt(i-1) == b.charAt(j-1)) {
                        tab[i][j] = tab[i-1][j-1];
                    } else {
                        tab[i][j] = Math.min(tab[i-1][j-1], Math.min(tab[i-1][j], tab[i][j-1])) + 1;
                    }
                }
            }
        }
        return tab[tab.length-1][tab[0].length-1];
    }
}


class BkUnit {
    public BkUnit(String word) {
        this.word = word;
    }
    String word;

    Map<Integer, BkUnit>  iter;

    public String getWord() {
        return word;
    }

    public void setWord(String word) {
        this.word = word;
    }

    public Map<Integer, BkUnit> getIter() {
        return iter;
    }

    public void setIter(Map<Integer, BkUnit> iter) {
        this.iter = iter;
    }
}
